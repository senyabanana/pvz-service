// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/senyabanana/pvz-service/internal/entity"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// IsEmailExists mocks base method.
func (m *MockUserRepository) IsEmailExists(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailExists", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailExists indicates an expected call of IsEmailExists.
func (mr *MockUserRepositoryMockRecorder) IsEmailExists(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailExists", reflect.TypeOf((*MockUserRepository)(nil).IsEmailExists), ctx, email)
}

// MockPVZRepository is a mock of PVZRepository interface.
type MockPVZRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPVZRepositoryMockRecorder
}

// MockPVZRepositoryMockRecorder is the mock recorder for MockPVZRepository.
type MockPVZRepositoryMockRecorder struct {
	mock *MockPVZRepository
}

// NewMockPVZRepository creates a new mock instance.
func NewMockPVZRepository(ctrl *gomock.Controller) *MockPVZRepository {
	mock := &MockPVZRepository{ctrl: ctrl}
	mock.recorder = &MockPVZRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZRepository) EXPECT() *MockPVZRepositoryMockRecorder {
	return m.recorder
}

// CreatePVZ mocks base method.
func (m *MockPVZRepository) CreatePVZ(ctx context.Context, pvz *entity.PVZ) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", ctx, pvz)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockPVZRepositoryMockRecorder) CreatePVZ(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockPVZRepository)(nil).CreatePVZ), ctx, pvz)
}

// GetAllPVZ mocks base method.
func (m *MockPVZRepository) GetAllPVZ(ctx context.Context) ([]entity.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPVZ", ctx)
	ret0, _ := ret[0].([]entity.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPVZ indicates an expected call of GetAllPVZ.
func (mr *MockPVZRepositoryMockRecorder) GetAllPVZ(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPVZ", reflect.TypeOf((*MockPVZRepository)(nil).GetAllPVZ), ctx)
}

// IsPVZExists mocks base method.
func (m *MockPVZRepository) IsPVZExists(ctx context.Context, pvzID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPVZExists", ctx, pvzID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPVZExists indicates an expected call of IsPVZExists.
func (mr *MockPVZRepositoryMockRecorder) IsPVZExists(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPVZExists", reflect.TypeOf((*MockPVZRepository)(nil).IsPVZExists), ctx, pvzID)
}

// MockReceptionRepository is a mock of ReceptionRepository interface.
type MockReceptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepositoryMockRecorder
}

// MockReceptionRepositoryMockRecorder is the mock recorder for MockReceptionRepository.
type MockReceptionRepositoryMockRecorder struct {
	mock *MockReceptionRepository
}

// NewMockReceptionRepository creates a new mock instance.
func NewMockReceptionRepository(ctrl *gomock.Controller) *MockReceptionRepository {
	mock := &MockReceptionRepository{ctrl: ctrl}
	mock.recorder = &MockReceptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepository) EXPECT() *MockReceptionRepositoryMockRecorder {
	return m.recorder
}

// CloseReceptionByID mocks base method.
func (m *MockReceptionRepository) CloseReceptionByID(ctx context.Context, receptionID uuid.UUID, closedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReceptionByID", ctx, receptionID, closedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseReceptionByID indicates an expected call of CloseReceptionByID.
func (mr *MockReceptionRepositoryMockRecorder) CloseReceptionByID(ctx, receptionID, closedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReceptionByID", reflect.TypeOf((*MockReceptionRepository)(nil).CloseReceptionByID), ctx, receptionID, closedAt)
}

// CreateReception mocks base method.
func (m *MockReceptionRepository) CreateReception(ctx context.Context, reception *entity.Reception) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, reception)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockReceptionRepositoryMockRecorder) CreateReception(ctx, reception interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockReceptionRepository)(nil).CreateReception), ctx, reception)
}

// GetOpenReception mocks base method.
func (m *MockReceptionRepository) GetOpenReception(ctx context.Context, pvzID uuid.UUID) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenReception", ctx, pvzID)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenReception indicates an expected call of GetOpenReception.
func (mr *MockReceptionRepositoryMockRecorder) GetOpenReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenReception", reflect.TypeOf((*MockReceptionRepository)(nil).GetOpenReception), ctx, pvzID)
}

// GetReceptionsByPVZIDs mocks base method.
func (m *MockReceptionRepository) GetReceptionsByPVZIDs(ctx context.Context, pvzIDs []uuid.UUID) ([]entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceptionsByPVZIDs", ctx, pvzIDs)
	ret0, _ := ret[0].([]entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceptionsByPVZIDs indicates an expected call of GetReceptionsByPVZIDs.
func (mr *MockReceptionRepositoryMockRecorder) GetReceptionsByPVZIDs(ctx, pvzIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceptionsByPVZIDs", reflect.TypeOf((*MockReceptionRepository)(nil).GetReceptionsByPVZIDs), ctx, pvzIDs)
}

// IsReceptionOpenExists mocks base method.
func (m *MockReceptionRepository) IsReceptionOpenExists(ctx context.Context, pvzID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReceptionOpenExists", ctx, pvzID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReceptionOpenExists indicates an expected call of IsReceptionOpenExists.
func (mr *MockReceptionRepositoryMockRecorder) IsReceptionOpenExists(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReceptionOpenExists", reflect.TypeOf((*MockReceptionRepository)(nil).IsReceptionOpenExists), ctx, pvzID)
}

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(ctx context.Context, product *entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), ctx, product)
}

// DeleteLastProduct mocks base method.
func (m *MockProductRepository) DeleteLastProduct(ctx context.Context, receptionID uuid.UUID) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, receptionID)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteLastProduct(ctx, receptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteLastProduct), ctx, receptionID)
}

// GetProductsByReceptionIDs mocks base method.
func (m *MockProductRepository) GetProductsByReceptionIDs(ctx context.Context, receptionIDs []uuid.UUID) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByReceptionIDs", ctx, receptionIDs)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByReceptionIDs indicates an expected call of GetProductsByReceptionIDs.
func (mr *MockProductRepositoryMockRecorder) GetProductsByReceptionIDs(ctx, receptionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByReceptionIDs", reflect.TypeOf((*MockProductRepository)(nil).GetProductsByReceptionIDs), ctx, receptionIDs)
}

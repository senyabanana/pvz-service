// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/senyabanana/pvz-service/internal/entity"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockAuthorization) LoginUser(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthorizationMockRecorder) LoginUser(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthorization)(nil).LoginUser), ctx, email, password)
}

// RegisterUser mocks base method.
func (m *MockAuthorization) RegisterUser(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthorizationMockRecorder) RegisterUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthorization)(nil).RegisterUser), ctx, user)
}

// MockPVZOperations is a mock of PVZOperations interface.
type MockPVZOperations struct {
	ctrl     *gomock.Controller
	recorder *MockPVZOperationsMockRecorder
}

// MockPVZOperationsMockRecorder is the mock recorder for MockPVZOperations.
type MockPVZOperationsMockRecorder struct {
	mock *MockPVZOperations
}

// NewMockPVZOperations creates a new mock instance.
func NewMockPVZOperations(ctrl *gomock.Controller) *MockPVZOperations {
	mock := &MockPVZOperations{ctrl: ctrl}
	mock.recorder = &MockPVZOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZOperations) EXPECT() *MockPVZOperationsMockRecorder {
	return m.recorder
}

// CreatePVZ mocks base method.
func (m *MockPVZOperations) CreatePVZ(ctx context.Context, city string) (*entity.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", ctx, city)
	ret0, _ := ret[0].(*entity.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockPVZOperationsMockRecorder) CreatePVZ(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockPVZOperations)(nil).CreatePVZ), ctx, city)
}

// GetAllPVZ mocks base method.
func (m *MockPVZOperations) GetAllPVZ(ctx context.Context) ([]entity.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPVZ", ctx)
	ret0, _ := ret[0].([]entity.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPVZ indicates an expected call of GetAllPVZ.
func (mr *MockPVZOperationsMockRecorder) GetAllPVZ(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPVZ", reflect.TypeOf((*MockPVZOperations)(nil).GetAllPVZ), ctx)
}

// GetFullPVZInfo mocks base method.
func (m *MockPVZOperations) GetFullPVZInfo(ctx context.Context, startDate, endDate *time.Time, page, limit int) ([]entity.FullPVZInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullPVZInfo", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]entity.FullPVZInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullPVZInfo indicates an expected call of GetFullPVZInfo.
func (mr *MockPVZOperationsMockRecorder) GetFullPVZInfo(ctx, startDate, endDate, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullPVZInfo", reflect.TypeOf((*MockPVZOperations)(nil).GetFullPVZInfo), ctx, startDate, endDate, page, limit)
}

// MockReceptionOperations is a mock of ReceptionOperations interface.
type MockReceptionOperations struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionOperationsMockRecorder
}

// MockReceptionOperationsMockRecorder is the mock recorder for MockReceptionOperations.
type MockReceptionOperationsMockRecorder struct {
	mock *MockReceptionOperations
}

// NewMockReceptionOperations creates a new mock instance.
func NewMockReceptionOperations(ctrl *gomock.Controller) *MockReceptionOperations {
	mock := &MockReceptionOperations{ctrl: ctrl}
	mock.recorder = &MockReceptionOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionOperations) EXPECT() *MockReceptionOperationsMockRecorder {
	return m.recorder
}

// CloseLastReception mocks base method.
func (m *MockReceptionOperations) CloseLastReception(ctx context.Context, pvzID uuid.UUID) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLastReception", ctx, pvzID)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLastReception indicates an expected call of CloseLastReception.
func (mr *MockReceptionOperationsMockRecorder) CloseLastReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReception", reflect.TypeOf((*MockReceptionOperations)(nil).CloseLastReception), ctx, pvzID)
}

// CreateReception mocks base method.
func (m *MockReceptionOperations) CreateReception(ctx context.Context, pvzID uuid.UUID) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, pvzID)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockReceptionOperationsMockRecorder) CreateReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockReceptionOperations)(nil).CreateReception), ctx, pvzID)
}

// MockProductOperations is a mock of ProductOperations interface.
type MockProductOperations struct {
	ctrl     *gomock.Controller
	recorder *MockProductOperationsMockRecorder
}

// MockProductOperationsMockRecorder is the mock recorder for MockProductOperations.
type MockProductOperationsMockRecorder struct {
	mock *MockProductOperations
}

// NewMockProductOperations creates a new mock instance.
func NewMockProductOperations(ctrl *gomock.Controller) *MockProductOperations {
	mock := &MockProductOperations{ctrl: ctrl}
	mock.recorder = &MockProductOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductOperations) EXPECT() *MockProductOperationsMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductOperations) AddProduct(ctx context.Context, pvzID uuid.UUID, productType entity.ProductType) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, pvzID, productType)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductOperationsMockRecorder) AddProduct(ctx, pvzID, productType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductOperations)(nil).AddProduct), ctx, pvzID, productType)
}

// DeleteLastProduct mocks base method.
func (m *MockProductOperations) DeleteLastProduct(ctx context.Context, pvzID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, pvzID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockProductOperationsMockRecorder) DeleteLastProduct(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockProductOperations)(nil).DeleteLastProduct), ctx, pvzID)
}
